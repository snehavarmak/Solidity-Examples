// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SecureSwap {
    struct Commit {
        bytes32 hash;
        uint256 amount;
    }

    mapping(address => Commit) public commits;
    mapping(address => uint256) public balances;
    uint256 public price = 1 ether;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function commitSwap(bytes32 hash, uint256 amount) public {
        commits[msg.sender] = Commit(hash, amount);
    }

    function revealSwap(uint256 amount, uint256 nonce) public {
        Commit memory commit = commits[msg.sender];
        require(commit.hash == keccak256(abi.encodePacked(amount, nonce)), "Invalid commit");
        require(balances[msg.sender] >= amount * price, "Insufficient balance");

        balances[msg.sender] -= amount * price;
        delete commits[msg.sender];
        // Transfer tokens (omitted for simplicity)
    }
}
